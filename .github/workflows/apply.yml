name: "Terraform"

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
      SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}
      TF_VAR_repo_github_password: ${{ secrets.TF_VAR_REPO_GITHUB_PASSWORD }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Write secrets.auto.tfvars file that contains github tokens to access cidr file
      - name: Write secrets tfvars file
        run: |
          cat > secrets.auto.tfvars <<EOF 
          git_tokens = {
          "lb-test-bnl" = "${{ secrets.GIT_TOKEN_LB_TEST_BNL }}"
          "lb-sdid-app-hp-public-mirai" = "${{ secrets.GIT_TOKEN_LB_SDID_APP_HP_PUBLIC_MIRAI }}"
          }
          EOF

      # Generates an execution plan for Terraform
      - name: Terraform apply
        run: terraform apply
